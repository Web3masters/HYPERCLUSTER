type campaign @entity {
  "the campaign address"
  id: ID!

  "the campaign address"
  campaign: Bytes!

  "the safe address where the rewards are stored"
  safeAddress: Bytes!

  "the address of the reward token"
  rewardTokenAddress: Bytes!

  "the address of the root account of the referral network"
  rootReferral: referral!

  "the percent of total supply rewarded on reaching a milestone"
  rewardPercentPerMilestone: BigInt!

  "the total supply of reward token in the campaign"
  totalSupply: BigInt!

  "the total supply after decrementing the milestone supply"
  totalMilestoneSupply: BigInt!

  "the available supply of the reward token"
  availableRewards: BigInt!

  "the total amount of rewards claimed"
  claimedRewards: BigInt!

  "the current milestone"
  milestonesReached: BigInt!

  "the number of accounts that failed bot check"
  botCheckFails: BigInt!

  "the starting timestamp of the campaign"
  startTimestamp: BigInt!

  "the ending timestamp of the campaign"
  endTimestamp: BigInt!

  "the metadata of the campaign"
  metadata: String!

  "the referrals in the network"
  referrals: [referral!]! @derivedFrom(field: "campaign")

  "the milestones attained in the campaign"
  milestones: [milestone!]! @derivedFrom(field: "campaign")

  "the total number of referrals in the network"
  totalReferrals: BigInt!

  "the transaction hash in which the campaign was created"
  transactionHash: Bytes!
}

type milestone @entity {
  "the campaign address + the milestone number"
  id: ID!

  "the milestone number"
  milestoneNumber: BigInt!

  "the total amount of rewards claimed in this milestone"
  milestoneRewards: BigInt!

  "the campaign address"
  campaign: campaign!

  "the number of users in this milestone"
  claimEligibleUsers: [user!]!
}

type referral @entity {
  "the campaign address + the user address"
  id: ID!

  "the user address"
  user: user!

  "the campaign address + the tier + the user address"
  reward: reward!

  "the campaign address"
  campaign: campaign!

  "the campaign address + the parent user address"
  parentReferral: referral

  "the two children referrals of the user"
  childrenReferrals: [referral!]! @derivedFrom(field: "parentReferral")

  "the transaction hash in which the referral was created"
  transactionHash: Bytes!
}

type user @entity {
  "the user address"
  id: ID!

  "the user address"
  user: Bytes!

  "the campaigns in which the user has participated"
  campaigns: [campaign!]!

  "the rewards for the user"
  rewards: [reward!]! @derivedFrom(field: "user")

  "the total amount of claimmable rewards for the user"
  totalClaimmableRewards: BigInt!

  "the referrals of the user"
  referrals: [referral!]! @derivedFrom(field: "user")

  "the children referrals of the user"
  childrenReferrals: [referral!]!

  "the parent referrals of the user"
  parentReferrals: [referral!]!
}

type reward @entity {
  "the campaign address + the user address"
  id: ID!

  "the address of the user"
  user: user!

  "the campaign address + the tier"
  tier: tier!

  "the campaign address"
  claimedAmount: BigInt!
}

type tier @entity {
  "the campaign address + the tier"
  id: ID!

  "the tier number in the referral network"
  tierNumber: BigInt!

  "the total reward amount for users in this tier"
  amount: BigInt!
}
